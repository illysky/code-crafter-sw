################################################################################################################################################
# Header File Snippet                                                                                                                                     
################################################################################################################################################
{@@_HDR_START_@@}
/********************************************************************************************************
* @file:			{$$_DRIVER_FILE_$$}.h
* @overview:		{$$_DRIVER_DESC_$$}
* @date:			08/11/2022 14:33:55
* @author:		    Illysky CodeCrafter v1.0.0
********************************************************************************************************/
#ifndef {$$_DRIVER_DEF_$$}_H
#define {$$_DRIVER_DEF_$$}_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <hal.h>

/*** Typedefs ***/
{$$_TYPEDEFS_$$}

/*** Prototypes ***/
{$$_PROTOTYPES_$$}

#ifdef __cplusplus
}
#endif
#endif // {$$_DRIVER_DEF_$$}_H
{@@_HDR_END_@@}

################################################################################################################################################
# C File Snippet                                                                                                                                     
################################################################################################################################################
{@@_C_START_@@}
/********************************************************************************************************
* @file:			{$$_DRIVER_FILE_$$}.c
* @overview:		{$$_DRIVER_DESC_$$}
* @date:			08/11/2022 14:33:55
* @author:		    Illysky CodeCrafter v1.0.0
********************************************************************************************************/

/*** Typedefs ***/
#include "{$$_HEADER_FILE_$$}.h"

/*** Variables ***/


/*** Functions ***/

{$$_FUNCTIONS_$$}

{@@_C_END_@@}

################################################################################################################################################
# Function Snippet                                                                                                                                      
################################################################################################################################################
{@@_CODE_START_@@}
/********************************************************************************************************
* @overview: {$$_OVERVIEW_$$}
********************************************************************************************************/
int32_t {$$_DRIVER_$$}_{$$_RW_$$}_{$$_REGNAME_$$} (uint32_t instance, {$$_TYPEDEF_$$}* data)
{
    return {$$_DRIVER_$$}_reg_{$$_RW_$$} (instance, {$$_REGADDR_$$}, data, {$$_REGSIZE_$$});     
}
{@@_CODE_END_@@}

################################################################################################################################################
# Stub Function Snippet                                                                                                                                      
################################################################################################################################################
{@@_STUB_START_@@}
/********************************************************************************************************
* @overview: {$$_OVERVIEW_$$}
********************************************************************************************************/
int32_t {$$_DRIVER_$$}_reg_{$$_RW_$$} (uint32_t instance, {$$_REGADDRSIZE_$$} addr, void* data, uint32_t size)
{
    // Stub to access the IC. Look, I can't do EVERYTHING for you, so you'll need to add some code here. SPI or I2C
    // instance: if you want more than one instance of the driver handle it here with this variable
    // addr: Address the register, this has been sized for you based on the width
    // data: treat the data as 8bit
    // size: size of data
    return 0; // Return 0 for good, or <0 for something bad.
}
{@@_STUB_END_@@}

################################################################################################################################################
# Init Function Snippet                                                                                                                                      
################################################################################################################################################
{@@_INIT_START_@@}
/********************************************************************************************************
* @overview: {$$_OVERVIEW_$$}
********************************************************************************************************/
int32_t {$$_DRIVER_$$}_init (void)
{
    // TODO: Generate init code here depending on SPI or I2C. 
    return 0; // Return 0 for good, or <0 for something bad.
}
{@@_INIT_END_@@}

################################################################################################################################################
# Typedef Snippet                                                                                                                                         
################################################################################################################################################
{@@_TYPEDEF_START_@@}
#define {$$_REGADDR_$$}
#define {$$_REGSIZE_$$}
typedef union
{
    {$$_WORD_$$};
    struct
    {
{$$_BITFIELDS_$$}
    }; 
} {$$_TYPEDEF_$$};
{@@_TYPEDEF_END_@@}


